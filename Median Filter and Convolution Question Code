{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"name":"Median Filter and Convolution Question Code","provenance":[]}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gbCBgzrDe2uN","executionInfo":{"status":"ok","timestamp":1636561988951,"user_tz":-330,"elapsed":409,"user":{"displayName":"sonal kukreja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjJ0XSiRwX3BfjvPLTUIYP-rVRSkeg7SP0YYfR1Kw=s64","userId":"02828157003908908421"}},"outputId":"179251a6-b6cf-4bbb-e178-2bb438c291a7"},"source":["import cv2\n","import numpy as np\n","\n","# Read image\n","img = np.array([[5,9,7,3],[0,2,7,5],[5,6,11,2],[4,6,2,8]])\n","#img = np.array([[5,6,7,8],[0,6,7,8],[5,6,15,8],[5,6,7,8]])\n","#img = np.array([[0,1,4,9],[1,2,5,10],[4,5,8,13],[9,10,13,18]])\n","#img = np.array([[12,10,18,6],[10,8,6,4],[8,6,4,2],[6,14,2,0]])\n","\n","H, W= img.shape\n","\n","\n","print(img)\n","\n"],"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 5  9  7  3]\n"," [ 0  2  7  5]\n"," [ 5  6 11  2]\n"," [ 4  6  2  8]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"-DKPC34vu1lu"},"source":["Median Filter Zero Padding"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9z0Frt5Ov2pP","executionInfo":{"status":"ok","timestamp":1636544363784,"user_tz":-330,"elapsed":4,"user":{"displayName":"sonal kukreja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjJ0XSiRwX3BfjvPLTUIYP-rVRSkeg7SP0YYfR1Kw=s64","userId":"02828157003908908421"}},"outputId":"6a4c64cb-2f17-4baa-df06-470481797e71"},"source":["#  Medium value filter template\n","K_size = 3\n","\n","#  Fill 0\n","#pad = K_size // 2\n","\n","out = np.zeros((H+2 , W+2), dtype=np.float)\n","#print(out.shape)\n","#out[pad:pad+H, pad:pad+W] = img.copy().astype(np.float)\n","out[1:H+1, 1:W+1] = img.copy()\n","\n","#4 edges are filled\n","out[0,0:H+2]   = 0\n","out[H+1,0:H+2] = 0\n","out[0:H+2,0]   = 0\n","out[0:H+2,H+1] = 0\n","\n","#4 angles to fill\n","#out[0,0] = out[H+1,H+1] = out[0,H+1]=out[H+1,0] = 0\n","tmp = out.copy()\n","\n","#print(out)\n","#print(tmp)\n","\n","\n","for x in range(1, W+1):\n","  for y in range(1, H+1):\n","    t = out[x-1:x+2, y-1:y+2]\n","    t_1d = t.flatten()\n","    s_t_1d = sorted(t_1d)\n","    tmp[x][y] = s_t_1d[4]\n","    #print(\"Iteration\",x,y)\n","    #print(tmp_1d)\n","    #out[y, x] = np.median(tmp[y-1:y+1, x-1:x+1])\n","\n","#print(out)\n","print(tmp[1:W+1, 1:H+1])\n","\n"],"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0.  0.  0.  0.  0.  0.]\n"," [ 0.  0.  1.  4.  9.  0.]\n"," [ 0.  1.  2.  5. 10.  0.]\n"," [ 0.  4.  5.  8. 13.  0.]\n"," [ 0.  9. 10. 13. 18.  0.]\n"," [ 0.  0.  0.  0.  0.  0.]]\n","[[ 0.  0.  0.  0.  0.  0.]\n"," [ 0.  0.  1.  4.  9.  0.]\n"," [ 0.  1.  2.  5. 10.  0.]\n"," [ 0.  4.  5.  8. 13.  0.]\n"," [ 0.  9. 10. 13. 18.  0.]\n"," [ 0.  0.  0.  0.  0.  0.]]\n","[[ 0.  0.  0.  0.  0.  0.]\n"," [ 0.  0.  1.  4.  9.  0.]\n"," [ 0.  1.  2.  5. 10.  0.]\n"," [ 0.  4.  5.  8. 13.  0.]\n"," [ 0.  9. 10. 13. 18.  0.]\n"," [ 0.  0.  0.  0.  0.  0.]]\n","[[ 0.  1.  2.  0.]\n"," [ 1.  4.  5.  5.]\n"," [ 2.  5. 10.  8.]\n"," [ 0.  5.  8.  0.]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"5rEfru-ru6AN"},"source":["Median Filter Wrap Around"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_Buuqmfyf_vE","executionInfo":{"status":"ok","timestamp":1636561994252,"user_tz":-330,"elapsed":407,"user":{"displayName":"sonal kukreja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjJ0XSiRwX3BfjvPLTUIYP-rVRSkeg7SP0YYfR1Kw=s64","userId":"02828157003908908421"}},"outputId":"afca730f-bbf3-4d67-ba1e-a3e93ad8705f"},"source":["#  Medium value filter template\n","K_size = 3\n","\n","#  Fill 0\n","#pad = K_size // 2\n","\n","out = np.zeros((H+2 , W+2), dtype=np.float)\n","#print(out.shape)\n","#out[pad:pad+H, pad:pad+W] = img.copy().astype(np.float)\n","out[1:H+1, 1:W+1] = img.copy()\n","\n","#4 edges are filled\n","out[0,1:W+1] = out[H,1:W+1]\n","out[H+1,1:W+1] = out[1,1:W+1]\n","out[1:H+1,0] = out[1:H+1,W]\n","out[1:H+1,W+1] = out[1:H+1,1] \n","\n","#4 angles to fill\n","#out[0,0] = out[H+1,H+1] = out[0,H+1]=out[H+1,0] = 0\n","out[0,0] = out[H,W]\n","out[0,W+1] = out[H,1]\n","out[H+1,0] = out[1,W]\n","out[H+1,W+1] = out[1,1]\n","tmp = out.copy()\n","\n","#print(out)\n","#print(tmp)\n","\n","\n","for x in range(1, W+1):\n","  for y in range(1, H+1):\n","    t = out[x-1:x+2, y-1:y+2]\n","    t_1d = t.flatten()\n","    s_t_1d = sorted(t_1d)\n","    tmp[x][y] = s_t_1d[4]\n","    #print(\"Iteration\",x,y)\n","    #print(tmp_1d)\n","    #out[y, x] = np.median(tmp[y-1:y+1, x-1:x+1])\n","\n","#print(out)\n","print(tmp[1:W+1, 1:H+1])"],"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 8.  4.  6.  2.  8.  4.]\n"," [ 3.  5.  9.  7.  3.  5.]\n"," [ 5.  0.  2.  7.  5.  0.]\n"," [ 2.  5.  6. 11.  2.  5.]\n"," [ 8.  4.  6.  2.  8.  4.]\n"," [ 3.  5.  9.  7.  3.  5.]]\n","[[ 8.  4.  6.  2.  8.  4.]\n"," [ 3.  5.  9.  7.  3.  5.]\n"," [ 5.  0.  2.  7.  5.  0.]\n"," [ 2.  5.  6. 11.  2.  5.]\n"," [ 8.  4.  6.  2.  8.  4.]\n"," [ 3.  5.  9.  7.  3.  5.]]\n","[[ 8.  4.  6.  2.  8.  4.]\n"," [ 3.  5.  9.  7.  3.  5.]\n"," [ 5.  0.  2.  7.  5.  0.]\n"," [ 2.  5.  6. 11.  2.  5.]\n"," [ 8.  4.  6.  2.  8.  4.]\n"," [ 3.  5.  9.  7.  3.  5.]]\n","[[5. 5. 6. 5.]\n"," [5. 6. 6. 5.]\n"," [5. 5. 6. 5.]\n"," [5. 6. 6. 5.]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"3UfE0Kw9u_DE"},"source":["Convolution Wrap Around"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FlWbrBgVs_wN","executionInfo":{"status":"ok","timestamp":1636546230026,"user_tz":-330,"elapsed":555,"user":{"displayName":"sonal kukreja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjJ0XSiRwX3BfjvPLTUIYP-rVRSkeg7SP0YYfR1Kw=s64","userId":"02828157003908908421"}},"outputId":"cd94c4de-97ec-4b8e-c237-8d7ca68c08ce"},"source":["# Convolution 2D\n","K_size = 3\n","\n","#  Fill 0\n","#pad = K_size // 2\n","\n","out = np.zeros((H+2 , W+2), dtype=np.float)\n","#print(out.shape)\n","#out[pad:pad+H, pad:pad+W] = img.copy().astype(np.float)\n","out[1:H+1, 1:W+1] = img.copy()\n","\n","#4 edges are filled\n","out[0,1:W+1] = out[H,1:W+1]\n","out[H+1,1:W+1] = out[1,1:W+1]\n","out[1:H+1,0] = out[1:H+1,W]\n","out[1:H+1,W+1] = out[1:H+1,1] \n","\n","#4 angles to fill\n","#out[0,0] = out[H+1,H+1] = out[0,H+1]=out[H+1,0] = 0\n","out[0,0] = out[H,W]\n","out[0,W+1] = out[H,1]\n","out[H+1,0] = out[1,W]\n","out[H+1,W+1] = out[1,1]\n","tmp = out.copy()\n","\n","#print(out)\n","#print(tmp)\n","\n","\n","for x in range(1, W+1):\n","  for y in range(1, H+1):\n","    t = out[x-1:x+2, y-1:y+2]\n","    t_1d = t.flatten()\n","    kernel = [0,0.5,0,-0.5,1,-0.5,0,0.5,0]\n","    result = [0,0,0,0,0,0,0,0,0]\n","    for z in range(0,len(kernel)):\n","      result[z] = t_1d[z] * kernel[z]\n","    #s_t_1d = sorted(t_1d)\n","    s = sum(result)\n","    tmp[x][y] = s\n","\n","\n","#print(out)\n","print(tmp[1:W+1, 1:H+1])"],"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0.  6. 14.  2.  0.  6.]\n"," [ 6. 12. 10. 18.  6. 12.]\n"," [ 4. 10.  8.  6.  4. 10.]\n"," [ 2.  8.  6.  4.  2.  8.]\n"," [ 0.  6. 14.  2.  0.  6.]\n"," [ 6. 12. 10. 18.  6. 12.]]\n","[[ 0.  6. 14.  2.  0.  6.]\n"," [ 6. 12. 10. 18.  6. 12.]\n"," [ 4. 10.  8.  6.  4. 10.]\n"," [ 2.  8.  6.  4.  2.  8.]\n"," [ 0.  6. 14.  2.  0.  6.]\n"," [ 6. 12. 10. 18.  6. 12.]]\n","[[ 0.  6. 14.  2.  0.  6.]\n"," [ 6. 12. 10. 18.  6. 12.]\n"," [ 4. 10.  8.  6.  4. 10.]\n"," [ 2.  8.  6.  4.  2.  8.]\n"," [ 0.  6. 14.  2.  0.  6.]\n"," [ 6. 12. 10. 18.  6. 12.]]\n","[[12.  6. 14. -7.]\n"," [14.  8. 11.  0.]\n"," [12. 11.  4. -2.]\n"," [ 9. 18.  6.  0.]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"rFbs9V1lvOnV"},"source":["Convolution Zero Padding"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"34szdXZQvHM1","executionInfo":{"status":"ok","timestamp":1636546171009,"user_tz":-330,"elapsed":737,"user":{"displayName":"sonal kukreja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjJ0XSiRwX3BfjvPLTUIYP-rVRSkeg7SP0YYfR1Kw=s64","userId":"02828157003908908421"}},"outputId":"e3b6f7b4-dc47-462b-9d93-ba08284b4e85"},"source":["#  Medium value filter template\n","K_size = 3\n","\n","#  Fill 0\n","#pad = K_size // 2\n","\n","out = np.zeros((H+2 , W+2), dtype=np.float)\n","#print(out.shape)\n","#out[pad:pad+H, pad:pad+W] = img.copy().astype(np.float)\n","out[1:H+1, 1:W+1] = img.copy()\n","\n","#4 edges are filled\n","out[0,0:H+2]   = 0\n","out[H+1,0:H+2] = 0\n","out[0:H+2,0]   = 0\n","out[0:H+2,H+1] = 0\n","\n","#4 angles to fill\n","#out[0,0] = out[H+1,H+1] = out[0,H+1]=out[H+1,0] = 0\n","tmp = out.copy()\n","\n","#print(out)\n","#print(tmp)\n","\n","\n","for x in range(1, W+1):\n","  for y in range(1, H+1):\n","    t = out[x-1:x+2, y-1:y+2]\n","    t_1d = t.flatten()\n","    kernel = [0,0.5,0,-0.5,1,-0.5,0,0.5,0]\n","    result = [0,0,0,0,0,0,0,0,0]\n","    for z in range(0,len(kernel)):\n","      result[z] = t_1d[z] * kernel[z]\n","    #s_t_1d = sorted(t_1d)\n","    s = sum(result)\n","    tmp[x][y] = s\n","\n","#print(out)\n","print(tmp[1:W+1, 1:H+1])"],"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0.  0.  0.  0.  0.  0.]\n"," [ 0. 12. 10.  8.  6.  0.]\n"," [ 0. 10.  8.  6.  4.  0.]\n"," [ 0.  8.  6.  4.  2.  0.]\n"," [ 0.  6. 14.  2.  0.  0.]\n"," [ 0.  0.  0.  0.  0.  0.]]\n","[[ 0.  0.  0.  0.  0.  0.]\n"," [ 0. 12. 10.  8.  6.  0.]\n"," [ 0. 10.  8.  6.  4.  0.]\n"," [ 0.  8.  6.  4.  2.  0.]\n"," [ 0.  6. 14.  2.  0.  0.]\n"," [ 0.  0.  0.  0.  0.  0.]]\n","[[ 0.  0.  0.  0.  0.  0.]\n"," [ 0. 12. 10.  8.  6.  0.]\n"," [ 0. 10.  8.  6.  4.  0.]\n"," [ 0.  8.  6.  4.  2.  0.]\n"," [ 0.  6. 14.  2.  0.  0.]\n"," [ 0.  0.  0.  0.  0.  0.]]\n","[[12.  4.  3.  4.]\n"," [16.  8.  6.  5.]\n"," [13. 11.  4.  2.]\n"," [ 3. 13. -3.  0.]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"5_WTHVUOw0Qe"},"source":["Erosion Dilation"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wxIgySagw26m","executionInfo":{"status":"ok","timestamp":1636558631121,"user_tz":-330,"elapsed":486,"user":{"displayName":"sonal kukreja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjJ0XSiRwX3BfjvPLTUIYP-rVRSkeg7SP0YYfR1Kw=s64","userId":"02828157003908908421"}},"outputId":"50440b93-a86d-4644-fd14-67646c8c3b24"},"source":["# Python program to demonstrate erosion and\n","# dilation of images.\n","import cv2\n","import numpy as np\n","\n","# Reading the input image\n","img = np.array(  [ [1, 1, 0, 0, 1, 1], [1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1]])\n","img = img.astype('uint8')\n","# Taking a matrix of size 5 as the kernel\n","kernel = np.ones((3,3), np.uint8)\n","\n","# The first parameter is the original image,\n","# kernel is the matrix with which image is\n","# convolved and third parameter is the number\n","# of iterations, which will determine how much\n","# you want to erode/dilate a given image.\n","img_erosion = cv2.erode(img,kernel,iterations = 1)\n","img_dilation = cv2.dilate(img, kernel, iterations=1)\n","\n","print(img_dilation)"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1 1 1 1 1 1]\n"," [1 1 1 1 1 1]\n"," [1 1 1 1 1 1]\n"," [1 1 1 1 1 1]\n"," [1 1 1 1 1 1]\n"," [1 1 1 1 1 1]]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":367},"id":"mQl1bDYOw00u","executionInfo":{"status":"error","timestamp":1636564010695,"user_tz":-330,"elapsed":406,"user":{"displayName":"sonal kukreja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjJ0XSiRwX3BfjvPLTUIYP-rVRSkeg7SP0YYfR1Kw=s64","userId":"02828157003908908421"}},"outputId":"dab6390a-591c-4d30-c46b-ae99122fb2f7"},"source":["import opencv as cv\n","img = np.array([[5,9,7,3],[0,2,7,5],[5,6,11,2],[4,6,2,8]])\n","wrap = cv2.copyMakeBorder(img,1,1,1,1,cv2.BORDER_WRAP)\n","print(wrap)\n","median = cv.medianBlur(img,5,cv.BORDER_WRAP)\n","print(median)"],"execution_count":15,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-112dc30a7b5a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mopencv\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m9\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m11\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mwrap\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopyMakeBorder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBORDER_WRAP\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwrap\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mmedian\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmedianBlur\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBORDER_WRAP\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'opencv'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]}]}